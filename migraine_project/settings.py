"""
Django settings for migraine_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-&t@9q8li_^kapfn=-n0j667&j6du_k*b*f1uet5iss5(^2ab-7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "https://8329-ic19w01kgqm2zowmagk08-51be25fc.manus.computer",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_json_widget",
    "forecast",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "migraine_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "migraine_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Import email settings
try:
    from .email_settings import *
except ImportError:
    pass

# Logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "migraine_forecast.log"),
            "formatter": "verbose",
        },
        # Sentry handler is automatically added by LoggingIntegration
        # It will capture ERROR level and above logs
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        "forecast": {
            "handlers": ["console", "file"],
            "level": "INFO",
            "propagate": True,
        },
        # Sentry's own logger
        "sentry_sdk": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}

# LLM configuration (OpenAI-compatible)
LLM_ENABLED = os.getenv("LLM_ENABLED", "true").lower() in ("1", "true", "yes", "on")
LLM_BASE_URL = os.getenv("LLM_BASE_URL", "http://192.168.0.11:11434")
# LLM_MODEL = os.getenv('LLM_MODEL', 'ibm/granite4:tiny-h')
LLM_MODEL = os.getenv("LLM_MODEL", "ibm/granite4:3b-h")
LLM_API_KEY = os.getenv("LLM_API_KEY", "")
LLM_TIMEOUT = float(os.getenv("LLM_TIMEOUT", "240.0"))

# Sentry/GlitchTip configuration
SENTRY_DSN = os.getenv("SENTRY_DSN", "http://da3f96ceb002454e85ac49a5f1916cd0@192.168.0.11:8001/1")
SENTRY_ENABLED = os.getenv("SENTRY_ENABLED", "true").lower() in ("1", "true", "yes", "on")
SENTRY_ENVIRONMENT = os.getenv("SENTRY_ENVIRONMENT", "development" if DEBUG else "production")
SENTRY_TRACES_SAMPLE_RATE = float(os.getenv("SENTRY_TRACES_SAMPLE_RATE", "1.0"))  # 1.0 = 100% of transactions
SENTRY_PROFILES_SAMPLE_RATE = float(os.getenv("SENTRY_PROFILES_SAMPLE_RATE", "1.0"))  # 1.0 = 100% of transactions

if SENTRY_ENABLED and SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(
                transaction_style="url",  # Track transactions by URL pattern
                middleware_spans=True,  # Create spans for middleware
                signals_spans=True,  # Create spans for Django signals
                cache_spans=True,  # Create spans for cache operations
            ),
            LoggingIntegration(
                level=None,  # Capture all log levels
                event_level="ERROR",  # Send ERROR and above as events to Sentry
            ),
        ],
        # Set traces_sample_rate to 1.0 to capture 100% of transactions for performance monitoring
        traces_sample_rate=SENTRY_TRACES_SAMPLE_RATE,
        # Set profiles_sample_rate to 1.0 to profile 100% of sampled transactions
        profiles_sample_rate=SENTRY_PROFILES_SAMPLE_RATE,
        # Environment name
        environment=SENTRY_ENVIRONMENT,
        # Send default PII (Personally Identifiable Information) like user IP, user ID
        send_default_pii=True,
        # Release tracking (optional - useful for tracking which version caused issues)
        # release=f"migraine-forecast@{os.getenv('APP_VERSION', 'dev')}",
        # Additional options
        debug=DEBUG,  # Enable debug mode in development
        attach_stacktrace=True,  # Attach stacktraces to all messages
        # Request bodies
        max_request_body_size="medium",  # Capture request bodies (small/medium/always)
        # Breadcrumbs
        max_breadcrumbs=50,  # Number of breadcrumbs to keep
        # Before send hook to filter/modify events before sending
        # before_send=lambda event, hint: event if not DEBUG else None,
    )
